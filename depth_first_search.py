# სიღრმეში ძებნა ან სიღრმეში ტრავერსია არის რეკურსიული ალგორითმი, 
# რომელიც გამოიყენება გრაფის ან ხის სტრუქტურაში ყველა წვეროს მოსაძებნად.
# ტრავერსია ნიშნავს გრაფის ყველა წვეროს მონახულებას.

# სიღრმეში ძებნის (DFS) ალგორითმი
def dfs(graph, start, visited=None):
    # თუ ჯერ არცერთი წვერო არ არის მონახულებული, ვქმნით ცარიელ ნაკრებს მონახულებულ წვეროებისთვის
    if visited is None:
        visited = set()
    
    # ვამატებთ მიმდინარე წვეროს მონახულებულთა ნაკრებში
    visited.add(start)
    print(visited)  # ვბეჭდავთ მონახულებულ წვეროებს, რომ ვნახოთ, როგორ მიმდინარეობს პროცესი

    # ვბეჭდავთ მიმდინარე წვეროს
    print(start)

    # ვხსნით მიმდებარე წვეროების სიას, რომელიც ჯერ არ არის მონახულებული
    # graph[start] გვაძლევს ყველა მიმდებარე წვეროს, ხოლო მინუს visited გვაიძულებს, რომ მხოლოდ არამონახულებული წვეროები ვნახოთ
    for next in graph[start] - visited:  
        # რეკურსიულად ვიძახებთ dfs ფუნქციას შემდეგი წვეროებისთვის
        dfs(graph, next, visited)
    
    # საბოლოოდ, ვაბრუნებთ მონახულებულ წვეროებს
    return visited


# გრაფის მაგალითი (არაორდინატული გრაფი)
# გრაფი წარმოადგენს 5 წვეროს, თითოეულს აქვს მიმდებარე წვეროები
graph = {
    '0': set(['3', '2', '1']),  # წვერო 0 უკავშირდება წვეროებს 1, 2, და 3
    '1': set(['0', '2']),       # წვერო 1 უკავშირდება წვეროებს 0 და 2
    '2': set(['0', '1', '4']),  # წვერო 2 უკავშირდება წვეროებს 0, 1 და 4
    '3': set(['0']),            # წვერო 3 უკავშირდება წვერო 0-ს
    '4': set(['2'])             # წვერო 4 უკავშირდება წვერო 2-ს
}

# სიღრმეში ძებნის ამოქმედება წვერო 0-დან
# აქ იწყება DFS ალგორითმის ამოქმედება, 0-დან იწყება ყველა წვეროს მონახულება
dfs(graph, '0')


# სიღრმეში ძებნის (DFS) დროის სირთულე წარმოდგენილია O(V + E) ფორმით, 
# სადაც V არის წვეროების რაოდენობა და E არის წიბოების რაოდენობა.

# ალგორითმის მეხსიერების სირთულე არის O(V), 
# რადგან უნდა შევინახოთ ინფორმაცია ყველა მონახულებულ წვეროზე.
